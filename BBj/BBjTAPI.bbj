REM /**
REM  * 2019-07-24 reading global 'BBJTAPIPORT' optionally to be able to override the default port of 12000.
REM  * 2019-07-24 introducing terminateBBjTapiClient(..) to send finally 'TERMINATE:..' over the wire to the BBjTAPIClient 
REM  * 2019-07-24 introducing terminateAllBBjTapiClient(..) to send finally 'TERMINATE' over the wire to each registered BBjTAPIClient 
REM  */

class public BBjTAPIClient

    field private BBjString CallbackMethod$
    field private Object CallbackObject!

    method public static void makeCall(BBjString extension$, BBjString number$)
        Ns! = BBjAPI().getNamespace("TAPI","Server",1)
        Ns!.setValue("O"+extension$,number$)
    methodend

	REM /**
	REM  * terminate the .NET Variant of the BBjTapiClient*.exe
	REM  */
    method public static void terminateBBjTapiClient(BBjString extension$)
        Ns! = BBjAPI().getNamespace("TAPI","Server",1)
        Ns!.setValue("T"+extension$,"TERMINATE:"+extension$)
    methodend
	
	REM /**
	REM  * Shut down all registered BBjTapiClient*.exe of the .Net implementation.
	REM  * If ::BBjTAPI.bbj::BBjTAPIServerData is running on various Terminalserver, this method needs to
	REM  * be called on each Terminalserver to terminate the registered BBjTapiClient*.exe
	REM  * instances.
	REM  * If BBjTapi.bbj is running only once centralized on a DataBase Server, this 
	REM  * method needs to be called one time to terminate all BBjTapiClients.exe of 
	REM  * the whole environment - as long each client is addressed to collaborate
	REM  * with the centralized ::BBjTAPI.bbj::BBjTAPIServerData instance on the DB server!
	REM  */
    method public static void terminateAllBBjTapiClient()
        Ns! = BBjAPI().getNamespace("TAPI","Server",1)
        Ns!.setValue("A"+"NOP","TERMINATE:ALL")
    methodend

    method public void setCallbackForIncomingCall(BBjString extension$, BBjString label$)
        #CallbackMethod$ = label$
        #CallbackObject! = null()
        Ns! = BBjAPI().getNamespace("TAPI","Server",1)
        Ns!.setCallbackForVariable("I"+extension$,#this!,"onIncomingCall")
        BBjAPI().setCustomEventCallback("TAPIIncomingCall",label$)
    methodend

    method public void setCallbackForIncomingCall(BBjString extension$, Object o!, BBjString method$)
        #CallbackMethod$ = method$
        #CallbackObject! = o!
        Ns! = BBjAPI().getNamespace("TAPI","Server",1)
        Ns!.setCallbackForVariable("I"+extension$,#this!,"onIncomingCall")
    methodend

    method public void onIncomingCall(BBjNamespaceEvent ev!)
        if #CallbackObject! = null() then
            BBjAPI().postPriorityCustomEvent("TAPIIncomingCall",ev!.getNewValue())
        else
            dummy$=stbl("!OPTIONS","EXECUTE_CALLED_PROGRAM=TRUE")
            o! = #CallbackObject!
            p! = payload!
            x$="o!."+#CallbackMethod$+"("""+ev!.getNewValue()+""")"

REM see https://bugzilla.basis.com/show_bug.cgi?id=28270
REM Bug 28270 - program drops to console after EXECUTE when called from a method that had been invoked using another EXECUTE 
REM             execute x$
REM do the old (slower) way until there's a fix for this edge condition:

            temp$ = str(java.io.File.createTempFile("blabla", ".call"))
            ch=unt
            open (ch)temp$
            write (ch)"ENTER"+$0a$+x$+$0a$+"EXIT"+$0a$
            close (ch)
            call temp$
            erase temp$
        fi
    methodend

classend


class public BBjTAPIServerData

    field private java.util.HashMap Socket2Ext! = new java.util.HashMap()
    field private java.util.HashMap Ext2Socket! = new java.util.HashMap()
    field private java.util.HashMap OutboundCallQueue! = new java.util.HashMap()
    field private java.util.HashMap OutboundTerminateQueue! = new java.util.HashMap()
	field private BBjNumber OutboundTerminateAllTrigger! = 0
    field private BBjNamespace Ns!


    method  public BBjTAPIServerData()
        #Ns! = BBjAPI().getNamespace("TAPI","Server",1)
        #Ns!.setCallbackForNamespace(#this!,"onNamespace")
    methodend

    method public void parse(BBjString sock$, BBjString cmd$)
        if len(cmd$)>4 AND cmd$(1,4)="REG:" then
            #register(sock$,cmd$(5))
        fi
        if len(cmd$)>5 and cmd$(1,5)="CALL:" then
            #reportIncomingCall(sock$,cmd$(6))
        fi
        if len(cmd$)>11 and cmd$(1,11)="TSPBINDING:" then
            #storeTSPBinding(sock$,cmd$(12))
        fi
        if len(cmd$)>12 and cmd$(1,12)="ALLBINDINGS:" then
            #storeAllBindings(sock$,cmd$(13))
        fi
    methodend

    method private void register(BBjString sock$, BBjString ext$)
        rem first remove old sock for same extension
        sock!=#Ext2Socket!.get(ext$)

        if (sock!<>null()) then
            #Socket2Ext!.remove(str(sock!))
            #Ext2Socket!.remove(ext$)
            #Ns!.removeValue("I"+ext$,err=*next)
            #Ns!.removeValue("O"+ext$,err=*next)
        fi

        ext!=#Socket2Ext!.get(sock$)
        if (ext!<>null()) then
            ext$=str(ext!)
            #Ext2Socket!.remove(ext$)
            #Socket2Ext!.remove(sock$)
            #Ns!.removeValue("I"+ext$)
            #Ns!.removeValue("O"+ext$)
        fi

        #Ext2Socket!.put(ext$,sock$)
        #Socket2Ext!.put(sock$,ext$)


        print "register extension '"+ext$+"' from '"+sock$+"'"


    methodend

    method private void reportIncomingCall(BBjString sock$, BBjString number$)
        ext!=#Socket2Ext!.get(sock$)
        if ext!<>null() then
            ext$=str(ext!)
            print "incoming call for extension '"+ext$+"' from '"+number$+"'"
            #Ns!.setValue("I"+ext$,number$)
        fi
    methodend
	
	
	REM /**
	REM  * Option to store the selected line and address in the context of the extension/identification.
	REM  * These information could be reused to start BBjTAPIClient.exe.
	REM  * This is an advantage in a load balanced server environment.
	REM  */
    method private void storeTSPBinding(BBjString sock$, BBjString stream$)
        declare BBjVector v!
		ext!=#Socket2Ext!.get(sock$)
        if ext!<>null() then
			v!=new BBjVector(java.util.Arrays.asList(new java.lang.String(stream$).split("[|]")))
			if v!.size()<3
				print "Unable to handle tsp binding stream - insufficient stream"
			else
				extension$=cast(BBjString,v!.get(0))
				line$=cast(BBjString,v!.get(1))
				address$=cast(BBjString,v!.get(2))
				REM /**
				REM  * storing in DB goes here 
				REM  */
				print "storage info. of extension '"+extension$+"', line '"+line$+"', address '"+address$+"'!"
			fi
        fi
    methodend
	
	
	REM /**
	REM  * Option to store all available line and address pairs in the business application.
	REM  * The assignments of line address pairs to extensions (like Employee-IDs) could be managed 
	REM  * at a central unit within the setup process and could reduce the effort to prepare
	REM  * each workstation.
	REM  */
	method private void storeAllBindings(BBjString sock$,BBjString stream$)
        declare BBjVector combies!
        declare BBjVector segs!
		ext!=#Socket2Ext!.get(sock$)
        if ext!<>null() then
			combies!=new BBjVector(java.util.Arrays.asList(new java.lang.String(stream$).split("[|]")))
			if combies!.size()=0
				print "Unable to handle stream about a collection of all available bindings - insufficient data"
			else
				for combie=0 to combies!.size()-1
					lineAddressColl$=cast(BBjString,combies!.get(combie))
					segs!=new BBjVector(java.util.Arrays.asList(new java.lang.String(lineAddressColl$).split("[~]")))
					if segs!.size()>0
						line$=cast(BBjString,segs!.get(0))
						if segs!.size()>1
							for address=1 to segs!.size()-1
								address$=cast(BBjString,segs!.get(address))
								REM /**
								REM  * storing available LINE, ADDRESS combination in DB goes here 
								REM  */
								print "storage info. of line '"+line$+"', address '"+address$+"'!"
							next address
						else
							REM /**
							REM  * storing available LINE in DB goes here 
							REM  */
							print "retrieved TSP line information '"+line$+"'."
						fi
					else
						print "received insufficient stream '"+stream$+"'!"
					fi
				next combie
			fi
        fi
	methodend
	
	
    method public void dump()
        print #Socket2Ext!
        print #Ext2Socket!
    methodend

    method public void onNamespace(BBjNamespaceEvent ev!)
        v$=ev!.getVariableName()
        if v$(1,1)="O" then
            #OutboundCallQueue!.put(v$(2),ev!.getNewValue())
        fi
        if v$(1,1)="T" then
            #OutboundTerminateQueue!.put(v$(2),ev!.getNewValue())
        fi
        if v$(1,1)="A" then
            #OutboundTerminateAllTrigger!=1
        fi
    methodend

    method public Boolean hasOutboundCallsPending()
        methodret #OutboundCallQueue!.size()>0
    methodend
	
    method public Boolean hasOutboundTerminatePending()
        methodret #OutboundTerminateQueue!.size()>0
    methodend

    method public Boolean isOutboundTerminateAllPending()
        flag=#OutboundTerminateAllTrigger!
		#OutboundTerminateAllTrigger!=0
		methodret flag>0
    methodend

    method public void writeOutboundCallsToSocket(BBjNumber ch)
        it!=#OutboundCallQueue!.keySet().iterator()
        while it!.hasNext()
            k$      = it!.next()
            number$ = #OutboundCallQueue!.get(k$)
            socket!=#Ext2Socket!.get(k$)
            if socket! <> null() then
                print (ch,err=*next,key=str(socket!))"OUTCALL:"+number$
                print "making outbound call on extension '"+k$+"' to '"+number$+"'"
            fi
        wend
        #OutboundCallQueue!.clear()
    methodend

    method public void writeOutboundTerminateToSocket(BBjNumber ch)
        it!=#OutboundTerminateQueue!.keySet().iterator()
        while it!.hasNext()
            k$      = it!.next()
            terminateCmd$ = #OutboundTerminateQueue!.get(k$)
            socket!=#Ext2Socket!.get(k$)
            if socket! <> null() then
                print (ch,err=*next,key=str(socket!))terminateCmd$; REM = 'TERMINATE:<EXTENSION-ID>'
                print "making outbound TERMINATE signal on extension '"+k$+"' of '"+terminateCmd$+"'"
				print "unregister extension '"+k$+"' of '"+socket!+"'"
				#Ext2Socket!.remove(k$)
				#Socket2Ext!.remove(socket!)
            fi
        wend
        #OutboundTerminateQueue!.clear()
    methodend
	
    method public void writeOutboundTerminateAllToSockets(BBjNumber ch)
		#Socket2Ext!.keySet().beforeFirst(err=*next)
		it!=#Socket2Ext!.keySet().iterator()
        while it!.hasNext()
            socket! = it!.next()
			print (ch,err=*next,key=str(socket!))"TERMINATE"
			print "making outbound TERMINATE signal on socket '"+socket!+"'"
        wend
		print "unregister all extensions"
		#Ext2Socket!.clear()
		#Socket2Ext!.clear()
    methodend


classend

t! = new BBjTAPIServerData()
BBjAPI().setCustomEventCallback("INTERRUPT","NOOP")
port=12000
port$=stbl("BBJTAPIPORT",err=*next); port=min(max(1,num(port$,err=*next)),65536)
portmode$="port="+str(port)
OPEN (1,MODE=portmode$)"N0"

loop:

    READ (1,tim=1,err=trap)X$
    if x$="" then
        goto LOOP
    fi
    K$=key(1)

    t!.parse(k$,x$)

goto loop

trap:
    if err<>0 then
        goto loop
    fi

        BBjAPI().postCustomEvent("INTERRUPT","")
        process_events,err=*next
        if t!.hasOutboundCallsPending() then
            t!.writeOutboundCallsToSocket(1)
        fi
        if t!.hasOutboundTerminatePending() then
            t!.writeOutboundTerminateToSocket(1)
        fi
		if t!.isOutboundTerminateAllPending() then
			t!.writeOutboundTerminateAllToSockets(1)
		fi

goto loop